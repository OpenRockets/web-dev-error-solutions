[{"body":"\nThis challenge focuses on creating a visually appealing and functional multi-level nested list using CSS, specifically employing techniques suitable for both CSS3 and Tailwind CSS. The goal is to transform a simple nested list into an accordion-style structure where each list item can be expanded and collapsed to reveal its sub-items.\n\n**Description of the Styling:**\n\nThe styling will incorporate a clean and modern aesthetic. We'll use a combination of CSS or Tailwind classes to achieve:\n\n* **Accordion effect:**  Sub-lists will be initially hidden. Clicking on a parent list item will toggle the visibility of its children.\n* **Visual cues:**  We'll use a plus (+) or minus (-) symbol to indicate whether a list item is expanded or collapsed.  We'll also apply subtle visual styling like background colors and transitions to enhance the user experience.\n* **Multi-level support:** The solution must gracefully handle nested lists of arbitrary depth.\n* **Responsiveness:** The layout should adapt appropriately to different screen sizes.\n\n**Full Code (CSS3):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Nested List Accordion</title>\n<style>\n.accordion {\n  background-color: #eee;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  transition: 0.4s;\n}\n\n.active, .accordion:hover {\n  background-color: #ccc; \n}\n\n.panel {\n  padding: 0 18px;\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n.panel.show {\n  max-height: 500px;  /* Adjust as needed */\n}\n\n.accordion::before {\n  content: \"\\2795\"; /* Unicode for minus sign */\n  display: inline-block;\n  margin-right: 5px;\n}\n\n.accordion.active::before {\n    content: \"\\2796\"; /* Unicode for plus sign */\n}\n</style>\n</head>\n<body>\n\n<h2>Nested List Accordion</h2>\n\n<div class=\"accordion\">\n  <p>Item 1</p>\n  <div class=\"panel\">\n    <ul>\n      <li>Sub-item 1.1</li>\n      <li>Sub-item 1.2</li>\n    </ul>\n  </div>\n</div>\n\n<div class=\"accordion\">\n  <p>Item 2</p>\n  <div class=\"panel\">\n      <ul>\n        <li>Sub-item 2.1</li>\n        <li>Sub-item 2.2</li>\n        <div class=\"accordion\">\n          <p>Sub-item 2.2.1</p>\n          <div class=\"panel\">\n              <ul>\n                <li>Sub-sub-item 2.2.1.1</li>\n              </ul>\n          </div>\n        </div>\n      </ul>\n  </div>\n</div>\n\n<script>\nvar acc = document.getElementsByClassName(\"accordion\");\nvar i;\n\nfor (i = 0; i < acc.length; i++) {\n  acc[i].addEventListener(\"click\", function() {\n    this.classList.toggle(\"active\");\n    var panel = this.nextElementSibling;\n    if (panel.style.maxHeight){\n      panel.style.maxHeight = null;\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + \"px\";\n    } \n  });\n}\n</script>\n\n</body>\n</html>\n```\n\n**Full Code (Tailwind CSS):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Nested List Accordion (Tailwind)</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body>\n  <div class=\"container mx-auto p-4\">\n    <div class=\"accordion\">\n        <button class=\"w-full bg-gray-200 hover:bg-gray-300 text-left p-4 flex items-center\">\n          <span class=\"mr-2\">Item 1</span>\n          <span class=\"transform transition-transform duration-300 rotate-0 group-open:rotate-90\">+</span>\n        </button>\n        <div class=\"overflow-hidden transition-max-h duration-300 max-h-0 group-open:max-h-[10rem]\">\n            <ul class=\"list-disc pl-6\">\n              <li>Sub-item 1.1</li>\n              <li>Sub-item 1.2</li>\n            </ul>\n        </div>\n    </div>\n    </div>\n</body>\n</html>\n\n\n```\n**(Note:  The Tailwind version requires adapting the  nesting and javascript logic for complete functionality, mirroring the CSS version's dynamic behavior. This example shows a basic structure to illustrate Tailwind integration.)**\n\n\n**Explanation:**\n\nBoth versions use a similar approach:\n\n* **HTML Structure:** A nested `<ul>` list provides the content hierarchy.  Each accordion section uses a container element (`div` in CSS, a custom component in Tailwind) to wrap the title and the collapsible content.\n* **CSS (or Tailwind Classes):** Styles handle the visual presentation, including the initial hidden state of sub-lists and transitions for smooth animations. The JavaScript toggles the `active` class to show/hide the content.\n* **JavaScript:** The JavaScript is crucial for the accordion's functionality. It listens for clicks on the accordion titles and updates the `max-height` style of the hidden content.\n\n**Links to Resources to Learn More:**\n\n* **CSS3:** [Mozilla Developer Network CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)\n* **Tailwind CSS:** [Tailwind CSS Documentation](https://tailwindcss.com/docs)\n* **JavaScript Event Listeners:** [MDN JavaScript Event Listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1987,"title":"CSS Challenge:  Multi-level Nested List with Stylish Accordions"}]
