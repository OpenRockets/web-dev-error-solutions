[{"body":"\nThis challenge involves creating a 3D rotating cube using only CSS.  We'll leverage CSS transforms and animations to achieve this effect without any JavaScript.  This example uses plain CSS, but could easily be adapted to Tailwind CSS by replacing the inline styles with Tailwind classes.\n\n**Description of the Styling:**\n\nThe cube is constructed using six divs, each representing a face.  These divs are positioned absolutely within a parent container.  `transform: rotateX`, `transform: rotateY`, and `transform: rotateZ` are used to create the 3D effect.  CSS animations are applied to continuously rotate the cube along the Y-axis.  Different colours are assigned to each face for visual clarity.\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>3D Rotating Cube</title>\n<style>\nbody {\n  perspective: 1000px; /* Necessary for 3D effect */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.cube {\n  width: 200px;\n  height: 200px;\n  position: relative;\n  transform-style: preserve-3d; /* Essential for 3D rendering */\n  animation: rotate 10s linear infinite;\n}\n\n.face {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 3em;\n  color: white;\n  backface-visibility: hidden; /* Prevents faces from showing through */\n}\n\n.front { background-color: #007bff; transform: translateZ(100px); }\n.back { background-color: #28a745; transform: translateZ(-100px) rotateY(180deg); }\n.right { background-color: #dc3545; transform: translateX(100px) rotateY(90deg); }\n.left { background-color: #ffc107; transform: translateX(-100px) rotateY(-90deg); }\n.top { background-color: #17a2b8; transform: translateY(-100px) rotateX(90deg); }\n.bottom { background-color: #6c757d; transform: translateY(100px) rotateX(-90deg); }\n\n@keyframes rotate {\n  from { transform: rotateY(0deg); }\n  to { transform: rotateY(360deg); }\n}\n</style>\n</head>\n<body>\n<div class=\"cube\">\n  <div class=\"face front\">Front</div>\n  <div class=\"face back\">Back</div>\n  <div class=\"face right\">Right</div>\n  <div class=\"face left\">Left</div>\n  <div class=\"face top\">Top</div>\n  <div class=\"face bottom\">Bottom</div>\n</div>\n</body>\n</html>\n```\n\n**Explanation:**\n\n* **`perspective`:** This property on the `body` creates the 3D viewing space.\n* **`transform-style: preserve-3d;`:** This is crucial; it ensures that child elements are rendered in 3D space.\n* **`translateZ`:** Moves elements along the Z-axis (depth).\n* **`rotateX`, `rotateY`, `rotateZ`:** Rotate elements around the respective axes.\n* **`backface-visibility: hidden;`:** Prevents the back faces from being visible when rotated.\n* **`@keyframes rotate`:** Defines the animation that rotates the cube continuously.\n\n\n**Links to Resources to Learn More:**\n\n* **MDN Web Docs - CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n* **MDN Web Docs - CSS Animations:** [https://developer.mozilla.org/en-US/docs/Web/CSS/animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n* **CSS-Tricks - 3D Transforms:** [https://css-tricks.com/almanac/properties/t/transform/](https://css-tricks.com/almanac/properties/t/transform/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2709,"title":"CSS Challenge:  3D Rotating Cube"}]
