[{"body":"\nThis challenge focuses on creating a 3D rotating cube using CSS.  We'll leverage CSS transforms and animations to achieve this effect without any JavaScript.  This example uses plain CSS, but could easily be adapted to use a CSS framework like Tailwind CSS by substituting Tailwind classes for the inline styles.\n\n\n**Description of the Styling:**\n\nThe cube is constructed using six divs, each representing a face.  Absolute positioning and clever rotation are used to create the 3D illusion.  The `transform-style: preserve-3d;` property is crucial, ensuring that child elements are also positioned in 3D space.  Keyframe animations handle the rotation.  Each face is styled with different colors for clarity.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>3D Rotating Cube</title>\n<style>\nbody {\n  perspective: 800px; /* Adjust for perspective effect */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.cube {\n  width: 200px;\n  height: 200px;\n  transform-style: preserve-3d;\n  animation: rotate 8s linear infinite;\n}\n\n.face {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2em;\n  backface-visibility: hidden; /* Prevents back faces from showing through */\n}\n\n.face.front {\n  background-color: red;\n  transform: translateZ(100px);\n}\n\n.face.back {\n  background-color: blue;\n  transform: translateZ(-100px) rotateY(180deg);\n}\n\n.face.left {\n  background-color: green;\n  transform: translateX(-100px) rotateY(-90deg);\n}\n\n.face.right {\n  background-color: yellow;\n  transform: translateX(100px) rotateY(90deg);\n}\n\n.face.top {\n  background-color: purple;\n  transform: translateY(-100px) rotateX(90deg);\n}\n\n.face.bottom {\n  background-color: orange;\n  transform: translateY(100px) rotateX(-90deg);\n}\n\n@keyframes rotate {\n  from {\n    transform: rotateY(0deg) rotateX(0deg);\n  }\n  to {\n    transform: rotateY(360deg) rotateX(360deg);\n  }\n}\n</style>\n</head>\n<body>\n<div class=\"cube\">\n  <div class=\"face front\">Front</div>\n  <div class=\"face back\">Back</div>\n  <div class=\"face left\">Left</div>\n  <div class=\"face right\">Right</div>\n  <div class=\"face top\">Top</div>\n  <div class=\"face bottom\">Bottom</div>\n</div>\n</body>\n</html>\n```\n\n\n**Explanation:**\n\n* **`perspective`:** This property on the `body` creates the 3D viewing space.  Adjusting this value changes the perspective.\n* **`transform-style: preserve-3d;`:** This is essential for the 3D effect on the cube's children.\n* **`transform` on each face:**  These transformations position and rotate each face to form the cube.  `translateZ` moves along the z-axis, creating depth, while `rotateX` and `rotateY` rotate around the respective axes.\n* **`backface-visibility: hidden;`:** This prevents the back of the faces from being visible.\n* **`@keyframes rotate`:** This animation smoothly rotates the cube over 8 seconds.\n\n\n**Links to Resources to Learn More:**\n\n* **MDN Web Docs - CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n* **MDN Web Docs - CSS Animations:** [https://developer.mozilla.org/en-US/docs/Web/CSS/animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n* **Understanding 3D transforms:** Search for tutorials on YouTube or other learning platforms about CSS 3D transforms for a more visual explanation.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2171,"title":"CSS Challenge:  3D Rotating Cube"}]
