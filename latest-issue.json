[{"body":"\nThis challenge focuses on creating a visually appealing loading button using CSS gradients and animations.  The button will smoothly transition between a gradient background and a spinning loading animation. We'll use pure CSS3 for this challenge, avoiding any JavaScript.\n\n## Description of the Styling\n\nThe button will be a rectangular shape with rounded corners.  Initially, it will display a vibrant linear gradient. Upon clicking, the gradient will fade slightly, and a loading spinner (created using CSS only) will appear and animate. Once the \"loading\" process (simulated here) is complete, the gradient will return to its original vibrancy, and the spinner will disappear.\n\n## Full Code\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Animated Gradient Loading Button</title>\n<style>\nbody {\n  font-family: sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.loading-button {\n  background: linear-gradient(to right, #ff5733, #ffc300);\n  color: white;\n  padding: 15px 30px;\n  border: none;\n  border-radius: 5px;\n  font-size: 18px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  position: relative;\n  overflow: hidden; /* To contain the spinner */\n}\n\n.loading-button:active {\n  background: linear-gradient(to right, #e64c24, #c0a800);\n}\n\n.loading-button .spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 3px solid #fff;\n  border-color: #fff transparent #fff transparent;\n  animation: spin 1s linear infinite;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.loading-button.loading .spinner {\n  opacity: 1;\n}\n\n.loading-button.loading {\n  background: linear-gradient(to right, #e64c24, #c0a800); /* slightly darker gradient */\n  cursor: wait; /* indicate loading state */\n}\n\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>\n</head>\n<body>\n<button class=\"loading-button\" onclick=\"this.classList.toggle('loading'); setTimeout(() => this.classList.remove('loading'), 2000);\">\n  Click Me\n</button>\n</body>\n</html>\n```\n\n\n## Explanation\n\n* **Base Styling:**  The button's initial style sets the gradient, padding, border, and font.  The `transition` property ensures a smooth background color change.\n* **Active State:**  The `:active` pseudo-class subtly changes the gradient when the button is pressed.\n* **Spinner:** The spinner is created using a pseudo-element (`::before` could also be used).  `border-color` and `animation` properties generate the spinning effect.  `opacity` is initially set to 0.\n* **Loading Class:**  The `.loading` class is added to the button on click, changing the gradient, adding the spinner visibility via opacity, and preventing further clicks by changing the cursor.  A `setTimeout` function simulates a loading delay and removes the `.loading` class after 2 seconds.\n\n\n## Links to Resources to Learn More\n\n* **CSS Gradients:** [MDN Web Docs - CSS Gradients](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient)\n* **CSS Animations:** [MDN Web Docs - CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n* **CSS Pseudo-classes and Pseudo-elements:** [MDN Web Docs - Pseudo-classes and Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1959,"title":"CSS Challenge:  Animated Gradient Loading Button"}]
