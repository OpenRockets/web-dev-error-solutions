[{"body":"\nThis challenge involves creating a multi-level nested accordion menu using CSS.  The accordion should allow users to expand and collapse sections, with nested sections expanding and collapsing independently. We'll be using plain CSS (no JavaScript) for this, focusing on the power of CSS's `:target` pseudo-class and sibling selectors.\n\n**Description of the Styling:**\n\nThe accordion will have a clean and modern look. Each section will have a title that, when clicked, toggles the visibility of its content. Nested sections will be indented to clearly show the hierarchy. We'll use a subtle background color change to indicate active sections.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Multi-level Nested Accordion</title>\n<style>\nbody {\n  font-family: sans-serif;\n}\n\n.accordion {\n  background-color: #f2f2f2;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  transition: 0.4s;\n}\n\n.active, .accordion:hover {\n  background-color: #ddd;\n}\n\n.accordion:after {\n  content: '\\2795'; /* Unicode character for \"plus\" sign */\n  color: #777;\n  font-weight: bold;\n  float: right;\n  margin-left: 5px;\n}\n\n.active:after {\n  content: \"\\2796\"; /* Unicode character for \"minus\" sign */\n}\n\n.panel {\n  padding: 0 18px;\n  display: none;\n  background-color: white;\n  overflow: hidden;\n}\n\n.panel.show {\n  display: block;\n}\n\n.nested-accordion {\n  margin-left: 20px;\n}\n</style>\n</head>\n<body>\n\n<h2>Multi-level Nested Accordion</h2>\n\n<button class=\"accordion\">Section 1\n  <div class=\"panel\">\n    <p>Content for Section 1</p>\n    <button class=\"accordion nested-accordion\">Nested Section 1.1\n      <div class=\"panel\">\n        <p>Content for Nested Section 1.1</p>\n      </div>\n    </button>\n    <button class=\"accordion nested-accordion\">Nested Section 1.2\n      <div class=\"panel\">\n        <p>Content for Nested Section 1.2</p>\n      </div>\n    </button>\n  </div>\n</button>\n\n<button class=\"accordion\">Section 2\n  <div class=\"panel\">\n    <p>Content for Section 2</p>\n  </div>\n</button>\n\n\n<script>\nvar acc = document.getElementsByClassName(\"accordion\");\nvar i;\n\nfor (i = 0; i < acc.length; i++) {\n  acc[i].addEventListener(\"click\", function() {\n    this.classList.toggle(\"active\");\n    var panel = this.nextElementSibling;\n    if (panel.style.display === \"block\") {\n      panel.style.display = \"none\";\n    } else {\n      panel.style.display = \"block\";\n    }\n  });\n}\n</script>\n\n</body>\n</html>\n```\n\n**Explanation:**\n\nThe code uses simple CSS to style the accordion. The `:target` pseudo-class is not used here because we're using Javascript for the interactive functionality. The JavaScript part adds event listeners to each accordion button.  When clicked, it toggles the `active` class, which changes the styling, and then shows or hides the corresponding panel using `display: block;` and `display: none;`.  The nested accordions work seamlessly because the same logic applies recursively.\n\n\n**Links to Resources to Learn More:**\n\n* **MDN Web Docs - CSS Selectors:** [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)\n* **MDN Web Docs - JavaScript Event Listeners:** [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n* **Understanding CSS Transitions and Animations:**  Search for tutorials on this topic - many excellent resources are available.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2706,"title":"CSS Challenge:  Multi-level Nested Accordion"}]
