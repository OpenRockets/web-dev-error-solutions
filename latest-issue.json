[{"body":"\nThis challenge focuses on styling nested lists to create an accordion-like effect using only CSS.  Each top-level list item will act as an accordion header, revealing or hiding its sub-levels when clicked. We'll achieve this without JavaScript, relying solely on CSS's `:target` pseudo-class and sibling selectors.  We'll aim for a clean and modern look.  This example utilizes standard CSS but could easily be adapted to Tailwind CSS by replacing the specific CSS properties with their Tailwind equivalents (e.g., `background-color` with `bg-gray-200`).\n\n**Description of the Styling:**\n\nThe styling includes:\n\n* **Accordion Headers:**  Each top-level list item (`<li>`) will have a distinct background color and padding.  On hover, the background will slightly darken.  A plus (+) or minus (-) symbol will indicate the open/closed state.\n* **Accordion Content:** Nested lists (`<ul>`) will initially be hidden.  When the corresponding header is clicked, the nested list will become visible.\n* **Visual Hierarchy:**  Proper indentation and styling will ensure a clear visual hierarchy between levels of the list.\n\n**Full Code (CSS):**\n\n```css\nul {\n  list-style: none;\n  padding: 0;\n  margin-bottom: 1rem;\n}\n\nli {\n  cursor: pointer;\n  padding: 0.8rem 1.2rem;\n  border-bottom: 1px solid #ddd;\n  transition: background-color 0.3s ease; /* smooth transition for hover effect */\n}\n\nli:hover {\n  background-color: #f0f0f0;\n}\n\nli > ul {\n  display: none;\n  margin-left: 20px;\n}\n\nli > ul:target { /* This is the key - show content when the UL is the target */\n  display: block;\n}\n\nli::before {\n  content: \"+ \"; /* Default plus symbol */\n  margin-right: 0.5rem;\n}\n\nli[aria-expanded=\"true\"]::before {\n  content: \"- \"; /* Change to minus when expanded */\n}\n\n\nli:has(>ul):focus-within, li:has(>ul:target) { /* Keep header visible on open */\n  background-color: #f0f0f0;\n}\n\na{\n  text-decoration: none;\n  color: inherit;\n}\n\n```\n\n**Full Code (HTML):**\n\n```html\n<ul>\n  <li><a href=\"#sublist1\">Item 1</a>\n    <ul id=\"sublist1\">\n      <li>Subitem 1.1</li>\n      <li>Subitem 1.2</li>\n    </ul>\n  </li>\n  <li><a href=\"#sublist2\">Item 2</a>\n    <ul id=\"sublist2\">\n      <li>Subitem 2.1</li>\n      <li>Subitem 2.2</li>\n      <li>Subitem 2.3</li>\n    </ul>\n  </li>\n  <li><a href=\"#sublist3\">Item 3</a>\n    <ul id=\"sublist3\">\n      <li>Subitem 3.1</li>\n      <li>Subitem 3.2 <a href=\"#sublist3-1\">Subitem 3.2.1</a>\n      <ul id=\"sublist3-1\">\n        <li>Sub-Subitem 3.2.1.1</li>\n      </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\n**Explanation:**\n\n* The core logic relies on the `:target` pseudo-class.  Each nested `<ul>` has a unique ID, and the corresponding `<li>`'s `<a>` tag's `href` attribute points to this ID.  When the `<li>` is clicked, the browser navigates to the ID, revealing the nested list. The `display: none;` and `display: block;` control visibility.\n* The `::before` pseudo-element adds the plus/minus symbol, dynamically changing based on whether the list is expanded.  This is controlled by setting the `aria-expanded` attribute dynamically in JavaScript (not shown here, as we are focusing on CSS solution).  A JavaScript improvement would smoothly handle the opening/closing and update the `aria-expanded` accordingly.\n* The `:has` and `focus-within` are included to manage cases of nested lists.\n\n\n**Resources to Learn More:**\n\n* **CSS Selectors:**  MDN Web Docs: [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)\n* **CSS Pseudo-classes:** MDN Web Docs: [https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)\n* **CSS Transitions:** MDN Web Docs: [https://developer.mozilla.org/en-US/docs/Web/CSS/transition](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)\n* **Understanding ARIA Attributes:** [https://www.w3.org/WAI/intro/aria](https://www.w3.org/WAI/intro/aria)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2057,"title":"CSS Challenge:  Multi-level Nested Lists with Stylish Accordions"}]
