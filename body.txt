
This challenge involves styling a multi-level nested list to resemble an accordion menu.  When a top-level list item is clicked, its sub-list expands; clicking again collapses it. We'll achieve this using pure CSS, without JavaScript. This particular implementation uses CSS3 transitions and avoids complex JavaScript for a cleaner and more performant solution.


## Styling Description

The styling focuses on creating a clean, modern look.  We'll use a subtle background color for the list items, distinct icons to indicate expansion/collapse, and smooth transitions for a polished user experience. The overall style aims for a minimal, user-friendly interface.  We'll leverage CSS variables for easier customization.


## Full Code (CSS Only)

```css
:root {
  --primary-color: #333;
  --accent-color: #007bff;
  --background-color: #f8f9fa;
}

ul.accordion {
  list-style: none;
  padding: 0;
}

ul.accordion li {
  background-color: var(--background-color);
  border-bottom: 1px solid #ddd;
  padding: 15px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

ul.accordion li.active {
  background-color: var(--accent-color);
  color: white;
}


ul.accordion li ul {
  list-style: none;
  padding: 0 20px;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
}

ul.accordion li.active ul {
  max-height: 200px; /* Adjust as needed */
}

ul.accordion li::before {
  content: "\25BC"; /* Unicode for a down-pointing triangle */
  margin-right: 10px;
  font-size: 1.2em;
  transition: transform 0.3s ease;
}

ul.accordion li.active::before {
  content: "\25B2"; /* Unicode for an up-pointing triangle */
  transform: rotate(180deg);
}

ul.accordion li ul li{
  padding-left: 10px; /* Added padding for sub-level items */
}

```

## HTML Structure (Example)

You'll need to include this HTML structure within your project to use the CSS above:

```html
<ul class="accordion">
  <li>
    Item 1
    <ul>
      <li>Subitem 1.1</li>
      <li>Subitem 1.2</li>
    </ul>
  </li>
  <li>
    Item 2
    <ul>
      <li>Subitem 2.1</li>
      <li>Subitem 2.2</li>
      <li>Subitem 2.3</li>
    </ul>
  </li>
  <li>Item 3</li>
</ul>

<script>
  const accordionItems = document.querySelectorAll('.accordion li');
  accordionItems.forEach(item => {
    item.addEventListener('click', () => {
      item.classList.toggle('active');
    });
  });
</script>

```

Remember to include the Javascript for toggling the `active` class, as pure CSS cannot handle event listeners.


## Explanation

* **CSS Variables:**  Using `:root` and `var()` allows for easy customization of colors and other styles.
* **`max-height` and `overflow: hidden;`:** These properties are key to the accordion effect.  The `max-height` is initially 0, hiding the sub-list.  When the item is active, `max-height` increases, revealing the content.  `overflow: hidden` prevents content from overflowing before the animation is complete.
* **Transitions:**  `transition` property provides smooth animations for background color and `max-height` changes.
* **Pseudo-elements (`::before`):** Used to display the expand/collapse icons. The `transform: rotate()` creates the rotation animation.
* **Javascript:** While the styling is pure CSS, the Javascript is crucial for adding event listeners to actually open and close the accordions upon clicking.


## Resources to Learn More

* **MDN Web Docs - CSS Transitions:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transition](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)
* **MDN Web Docs - CSS Pseudo-elements:** [https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
* **CSS-Tricks:** [https://css-tricks.com/](https://css-tricks.com/) (Search for tutorials on accordions and CSS animations)


Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.

