[{"body":"\nThis challenge focuses on creating a clean and responsive pricing table using CSS.  We'll leverage standard CSS (no Tailwind this time) to build a table with three pricing plans, each highlighting key features and prices. The goal is to achieve a visually appealing layout that adapts well to different screen sizes.\n\n\n**Description of the Styling:**\n\nThe pricing table will have a card-like appearance with rounded corners, subtle shadows, and a clear separation between the pricing plans. Each plan will be contained within a separate column, with headings for plan name, price, and features.  We will use a consistent color palette and appropriate typography for readability. Responsiveness will be achieved using media queries to adjust column widths and potentially layout at smaller screen sizes.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Pricing Table</title>\n<style>\nbody {\n  font-family: sans-serif;\n}\n\n.pricing-table {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  padding: 20px;\n}\n\n.plan {\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  margin: 10px;\n  width: 300px; /* Adjust as needed */\n  text-align: center;\n}\n\n.plan h2 {\n  margin-bottom: 10px;\n}\n\n.plan .price {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 15px;\n}\n\n.plan ul {\n  list-style: none;\n  padding: 0;\n}\n\n.plan li {\n  margin-bottom: 5px;\n}\n\n\n@media (max-width: 768px) {\n  .pricing-table {\n    flex-direction: column; /* Stack plans vertically on smaller screens */\n  }\n  .plan {\n    width: 90%; /* Occupy most of the width on smaller screens */\n    margin: 10px auto; /* Center the plans */\n  }\n}\n</style>\n</head>\n<body>\n\n<div class=\"pricing-table\">\n  <div class=\"plan\">\n    <h2>Basic</h2>\n    <div class=\"price\">$9.99/month</div>\n    <ul>\n      <li>10GB Storage</li>\n      <li>1 User</li>\n      <li>Basic Support</li>\n    </ul>\n  </div>\n  <div class=\"plan\">\n    <h2>Premium</h2>\n    <div class=\"price\">$29.99/month</div>\n    <ul>\n      <li>100GB Storage</li>\n      <li>5 Users</li>\n      <li>Priority Support</li>\n    </ul>\n  </div>\n  <div class=\"plan\">\n    <h2>Enterprise</h2>\n    <div class=\"price\">$99.99/month</div>\n    <ul>\n      <li>Unlimited Storage</li>\n      <li>Unlimited Users</li>\n      <li>Dedicated Support</li>\n    </ul>\n  </div>\n</div>\n\n</body>\n</html>\n```\n\n**Explanation:**\n\nThe code utilizes flexbox for easy layout management.  The `pricing-table` div uses `flex-wrap: wrap` to allow plans to wrap onto the next line if necessary.  Media queries are employed to adjust the layout for smaller screens, switching to a vertical stack.  Classes like `plan`, `price`, and others are used for styling individual components.  The CSS focuses on visual appeal, responsiveness, and semantic clarity.\n\n\n**Links to Resources to Learn More:**\n\n* **CSS Flexbox:** [MDN Web Docs - CSS Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)\n* **CSS Media Queries:** [MDN Web Docs - CSS Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)\n* **CSS Grid (alternative layout method):** [MDN Web Docs - CSS Grid Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1861,"title":"CSS Challenge:  Reproducing a Simple Pricing Table"}]
