[{"body":"\n## Description of the Error\n\nA common challenge in MongoDB aggregation pipelines involves using the `$lookup` operator with an array of embedded documents.  The standard `$lookup` expects a field containing a single value to match on, but when dealing with an array of objects within a document, the direct use of `$lookup` results in an error. This error typically manifests as: \"The $lookup stage is only supported for fields that contain an atomic value. The field 'arrayField' contains an array.\"\n\n## Fixing the Problem Step-by-Step\n\nLet's assume we have two collections: `users` and `orders`. The `users` collection contains an array of `orders` within each user document:\n\n\n**users collection:**\n\n```json\n[\n  {\n    \"_id\": 1,\n    \"name\": \"Alice\",\n    \"orders\": [\n      { \"orderId\": 101, \"amount\": 100 },\n      { \"orderId\": 102, \"amount\": 200 }\n    ]\n  },\n  {\n    \"_id\": 2,\n    \"name\": \"Bob\",\n    \"orders\": [\n      { \"orderId\": 103, \"amount\": 300 }\n    ]\n  }\n]\n```\n\n**orders collection:**\n\n```json\n[\n  { \"_id\": 101, \"totalAmount\": 110 },\n  { \"_id\": 102, \"totalAmount\": 220 },\n  { \"_id\": 103, \"totalAmount\": 330 }\n]\n```\n\nOur goal is to join the `users` and `orders` collections to get the `totalAmount` for each order within the user's order array.  Direct `$lookup` won't work because `orders` is an array.\n\nHere's the step-by-step solution using `$unwind`, `$lookup`, and `$group`:\n\n**Step 1: Unwind the `orders` array**\n\nThis step transforms the array of orders into individual documents, allowing `$lookup` to work on each individual order.\n\n```javascript\ndb.users.aggregate([\n  {\n    $unwind: \"$orders\"\n  }\n])\n```\n\n**Step 2: Perform the `$lookup`**\n\nNow we can use `$lookup` to join with the `orders` collection based on the `orderId`.\n\n```javascript\ndb.users.aggregate([\n  {\n    $unwind: \"$orders\"\n  },\n  {\n    $lookup: {\n      from: \"orders\",\n      localField: \"orders.orderId\",\n      foreignField: \"_id\",\n      as: \"orderDetails\"\n    }\n  }\n])\n```\n\n**Step 3:  Process the results and restructure**\n\nThe result of Step 2 will have an array `orderDetails` even if there is only one matching document. We can use `$replaceRoot` and `$arrayElemAt` to simplify:\n\n```javascript\ndb.users.aggregate([\n  {\n    $unwind: \"$orders\"\n  },\n  {\n    $lookup: {\n      from: \"orders\",\n      localField: \"orders.orderId\",\n      foreignField: \"_id\",\n      as: \"orderDetails\"\n    }\n  },\n  {\n    $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$orderDetails\", 0 ] }, { \"_id\": \"$_id\", \"name\": \"$name\", \"orderDetails\": \"$orderDetails\" }] } }\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      orderId: \"$orders.orderId\",\n      amount: \"$orders.amount\",\n      totalAmount: \"$totalAmount\"\n    }\n  }\n])\n```\n\n**Step 4 (Optional): Group back to original structure**\n\nIf you need to reconstruct the original document structure with the `totalAmount` embedded within the `orders` array, you'll need a final `$group` stage. This will be more complex and depends on your exact desired output.\n\n\n\n## Explanation\n\nThe key to solving this problem is understanding that `$lookup` expects atomic values for the join fields.  By using `$unwind`, we deconstruct the array, allowing each order to be individually joined.  After the join, we use `$replaceRoot` and `$arrayElemAt` to make the data easier to handle. The final `$project` stage cleans up the output to only include necessary fields.  The optional `$group` stage allows for reconstruction if the original structure is required.\n\n\n## External References\n\n* **MongoDB Aggregation Framework Documentation:** [https://www.mongodb.com/docs/manual/aggregation/](https://www.mongodb.com/docs/manual/aggregation/)\n* **MongoDB $lookup Operator:** [https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/](https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/)\n* **MongoDB $unwind Operator:** [https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/](https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1507,"title":"Overcoming the \"Cannot Use $lookup with Array of Objects\" Error in MongoDB Aggregation"}]
