[{"body":"\nThis challenge focuses on creating a visually appealing loading button using CSS animations and gradients. The button will smoothly transition from a static state to an animated loading state, showcasing a gradient effect and a spinning indicator. We'll use plain CSS for this example.\n\n\n**Description of the Styling:**\n\nThe button will initially display solid text.  On click, it will transition to a loading state, where the text is hidden, and a spinning circular gradient is displayed.  The gradient will use a vibrant color scheme.  The animation will be smooth and visually engaging.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Animated Gradient Loading Button</title>\n<style>\n.button {\n  display: inline-block;\n  padding: 15px 30px;\n  border-radius: 5px;\n  background-color: linear-gradient(to right, #4CAF50, #8BC34A);\n  color: white;\n  text-decoration: none;\n  transition: background-color 0.3s ease;\n  cursor: pointer;\n}\n\n.button:hover {\n  background-color: linear-gradient(to right, #388E8E, #008080);\n}\n\n.button.loading {\n  background-color: transparent; /* Remove background for loading state */\n  cursor: wait; /* Indicate loading */\n  animation: spinner 1s linear infinite;\n}\n\n.button.loading span {\n    display: none;\n}\n\n.button.loading::before {\n  content: '';\n  display: block;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 3px solid #f00;\n  border-color: #4CAF50 transparent #4CAF50 transparent; /* Gradient border */\n  animation: rotate 1s linear infinite;\n}\n\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes spinner {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n</style>\n</head>\n<body>\n\n<a href=\"#\" class=\"button\" id=\"myButton\">Click Me</a>\n\n<script>\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  button.classList.add('loading');\n  setTimeout(() => {\n    button.classList.remove('loading');\n    // Add any further actions here, e.g., after the simulated load is complete.  \n  }, 2000); // Simulate a 2-second loading time.\n});\n</script>\n\n</body>\n</html>\n```\n\n\n**Explanation:**\n\n1. **Base Styling:**  The base `.button` class sets up the button's appearance (padding, background, color, etc.).  A hover effect is included.\n\n2. **Loading State:** The `.button.loading` class styles the button during the loading animation. It makes the text disappear, adds a `cursor:wait` style,  and adds the spinning element using the `::before` pseudo-element.  The spinner is created using a rotating circular gradient.\n\n3. **Keyframes:** The `@keyframes` rules define the animations for the spinner (`rotate`) and a subtle scaling animation for the button itself (`spinner`).\n\n4. **JavaScript:**  A small JavaScript snippet adds the `loading` class to the button on click, simulating a loading process. After a 2-second delay (adjustable), the `loading` class is removed.\n\n\n**Links to Resources to Learn More:**\n\n* **CSS Animations:** [MDN Web Docs - CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n* **CSS Gradients:** [MDN Web Docs - CSS Gradients](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient)\n* **CSS Pseudo-elements:** [MDN Web Docs - CSS Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2253,"title":"CSS Challenge:  Animated Gradient Loading Button"}]
