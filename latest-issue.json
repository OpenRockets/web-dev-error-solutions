[{"body":"\nThis challenge focuses on creating a visually appealing loading button using CSS gradients and animations. The button will smoothly transition between different gradient colors while displaying a loading spinner.  We'll use CSS3 for the styling, avoiding any frameworks like Tailwind for this example to showcase core CSS concepts.\n\n**Description of the Styling:**\n\nThe button will be a rectangular shape with rounded corners.  Initially, it will display the text \"Load\". On click, the text will be hidden, and a loading spinner (created with CSS) will appear.  Simultaneously, a linear gradient will animate across the button, cycling through a predefined set of colors.  Once the animation completes (simulating a load), the text will reappear, and the gradient will revert to its initial state.\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Animated Gradient Loading Button</title>\n<style>\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.button {\n  position: relative;\n  display: inline-block;\n  padding: 15px 30px;\n  font-size: 16px;\n  text-decoration: none;\n  text-transform: uppercase;\n  border-radius: 5px;\n  background-image: linear-gradient(to right, #4CAF50, #8BC34A);\n  color: white;\n  transition: background-image 0.3s ease; /*Smooth Transition*/\n  overflow: hidden; /*hide spinner initially*/\n}\n\n.button span {\n  transition: opacity 0.3s ease; /*Smooth Text Transition*/\n}\n\n.button.loading {\n  background-image: linear-gradient(to right, #4CAF50, #8BC34A, #CDDC39, #FFEB3B, #FFC107, #FFA000, #FF5722, #F44336);\n  background-size: 400% 100%;\n  animation: gradientAnimation 2s ease infinite; /*Animation for gradient*/\n}\n\n.button.loading span {\n  opacity: 0;\n}\n\n.button.loading::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 20px;\n  height: 20px;\n  border: 3px solid rgba(255,255,255,0.3); /*Spinner*/\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s linear infinite; /*Spinner animation*/\n}\n\n\n@keyframes gradientAnimation {\n  0% {\n    background-position: 0% 50%;\n  }\n  100% {\n    background-position: 100% 50%;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n</style>\n</head>\n<body>\n<a href=\"#\" class=\"button\" onclick=\"handleLoad(this)\">\n  <span>Load</span>\n</a>\n<script>\nfunction handleLoad(button) {\n  button.classList.add('loading');\n  setTimeout(() => {\n    button.classList.remove('loading');\n  }, 2000);\n}\n</script>\n</body>\n</html>\n```\n\n**Explanation:**\n\n* **HTML:**  A simple `<a>` tag is used as the button, containing a `<span>` for the text.  The `onclick` event triggers the JavaScript function.\n* **CSS:**  The main styling is done here.  The `loading` class adds the animation and spinner. `::before` is used for the pseudo-element spinner. Keyframes define the gradient and spinner animations.\n* **JavaScript:** The `handleLoad` function adds and removes the `loading` class to control the animation and simulates a loading delay with `setTimeout`.\n\n\n**Links to Resources to Learn More:**\n\n* **CSS Gradients:** [MDN Web Docs - CSS Gradients](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient)\n* **CSS Animations:** [MDN Web Docs - CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n* **CSS Pseudo-elements:** [MDN Web Docs - CSS Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1884,"title":"CSS Challenge:  Animated Gradient Loading Button"}]
