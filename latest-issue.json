[{"body":"\nThis challenge focuses on creating a simple, yet visually appealing, rotating square using only CSS.  We'll achieve the rotation effect using CSS animations and transitions, demonstrating fundamental animation concepts.  This example utilizes plain CSS; adapting it to Tailwind CSS is straightforward, involving replacing the inline styles with appropriate Tailwind classes.\n\n**Description of the Styling:**\n\nThe challenge involves creating a square that continuously rotates clockwise at a moderate speed.  The square will have a solid color background and a slight border for better visibility.  The animation should be smooth and seamless, looping indefinitely.\n\n\n**Full Code (CSS):**\n\n```css\n.rotating-square {\n  width: 100px;\n  height: 100px;\n  background-color: #3498db; /* A nice blue color */\n  border: 2px solid #2980b9; /* Slightly darker blue border */\n  animation: rotate 2s linear infinite; /* Animation properties */\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n**Full Code (HTML -  to accompany the CSS):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Rotating Square</title>\n<style>\n  /* CSS code from above goes here */\n</style>\n</head>\n<body>\n  <div class=\"rotating-square\"></div>\n</body>\n</html>\n```\n\n\n**Explanation:**\n\n* **`.rotating-square`:** This CSS class styles the square element.  `width` and `height` set the dimensions. `background-color` and `border` define the appearance.  `animation` applies the `rotate` animation.\n\n* **`animation: rotate 2s linear infinite;`:** This is the core of the animation.\n    * `rotate`: This is the name of the keyframes animation we define below.\n    * `2s`:  Specifies the duration of one animation cycle (2 seconds).\n    * `linear`:  Indicates a constant animation speed (no acceleration or deceleration).\n    * `infinite`: Makes the animation loop continuously.\n\n\n* **`@keyframes rotate`:** This block defines the animation itself.\n    * `from`:  Specifies the starting state (0 degrees rotation).\n    * `to`: Specifies the ending state (360 degrees rotation â€“ a full circle).\n\n**Adapting to Tailwind CSS:**\n\nTailwind CSS simplifies this by providing pre-defined classes.  You could achieve a similar result with:\n\n```html\n<div class=\"w-24 h-24 bg-blue-500 border-2 border-blue-700 animate-spin\"></div>\n```\n\nThis leverages Tailwind's width (`w-24`), height (`h-24`), background color (`bg-blue-500`), border (`border-2 border-blue-700`), and built-in spin animation (`animate-spin`).  Remember to include the Tailwind CSS library in your project.\n\n\n**Resources to Learn More:**\n\n* **MDN Web Docs on CSS Animations:** [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n* **MDN Web Docs on CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n* **Tailwind CSS Documentation:** [https://tailwindcss.com/docs](https://tailwindcss.com/docs)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":2083,"title":"CSS Challenge:  Animated Rotating Square"}]
